{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOe9BC7WIw6lFdgOLKsyX77",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ara42/Blog_Project/blob/main/ml/text_ocr.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RjoJFtseFoKx"
      },
      "outputs": [],
      "source": [
        " !pip install PyMySQL"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pymysql"
      ],
      "metadata": {
        "id": "OUmTwWPCFon0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "blogdb = pymysql.connect(host='blogdb.cm2yxwfja9ii.ap-northeast-2.rds.amazonaws.com',\n",
        "                      user='admin',\n",
        "                      password='blogdb!2',\n",
        "                      database='blogdb',\n",
        "                      charset='utf8',\n",
        "                      port=3306)\n",
        "\n",
        "cursor =blogdb.cursor(pymysql.cursors.DictCursor)\n",
        "\n",
        "# 데이터불러오기\n",
        "query = \"SELECT id,images, ocr_text FROM post_data where map=1 And ad_status = 'NEED-TO-PROCESS' and res_id >17 and res_id<30\"\n",
        "cursor.execute(query)\n",
        "results = cursor.fetchall()"
      ],
      "metadata": {
        "id": "CF0VL19OFrJq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"230818 vision ai .ipynb\n",
        "\n",
        "Automatically generated by Colaboratory.\n",
        "\n",
        "Original file is located at\n",
        "    https://colab.research.google.com/drive/1w86hzJtHyHFJf_jq7NByV7mcxBxqH984\n",
        "\"\"\"\n",
        "\n",
        "!pip install google-cloud-vision\n",
        "\n",
        "from google.cloud import vision\n",
        "import io\n",
        "import os\n",
        "import requests\n",
        "import re\n",
        "\n",
        "os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/content/drive/MyDrive/Colab Notebooks/project1-393401-6e3fff67ffb5.json'\n",
        "\n",
        "def str_filter(text):\n",
        "    html_spch = ['&quot;','&amp;','&lt;','&gt;','&apos;',\n",
        "             '&nbsp;','&iexcl;','&cent;','&pound;',\n",
        "             '&curren;','&yen;','&brvbar;','&sect;',\n",
        "             '&uml;','&copy;','&ordf;','&laquo;','&not;',\n",
        "             '&shy;','&reg;','&macr;','&deg;','&plusmn;',\n",
        "             '&sup2;','&sup3;','&acute;','&micro;','&para;',\n",
        "             '&middot;','&cedil;','&sup1;','&ordm;','&raquo;',\n",
        "             '&frac14;','&frac12;','&frac34;','&iquest;']\n",
        "    html_tag = ['<b>','\\n','</b>','<b/>','<a>','</a>','<a/>',\n",
        "            '<br>','</br>','<br/>','<p>','</p>','<p/>',\n",
        "            '<strong>','</strong>','<strong/>']\n",
        "    html_spch_tag = html_spch + html_tag\n",
        "    or_exp = '|'.join(html_spch_tag)\n",
        "    text = re.sub(or_exp,\" \",text)\n",
        "    text1= re.sub(r'[^\\w\\s]',' ',text)\n",
        "    text2= re.sub(r\"^\\s+|\\ㄴ+$\",\"\",text1) # 양측 공백 제거\n",
        "    return text2\n",
        "\n",
        "def image_text(img_path):\n",
        "    # Initialize the client\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "\n",
        "    # Load the image\n",
        "    image_link = img_path\n",
        "\n",
        "    image_response = requests.get(image_link)\n",
        "    image_content = image_response.content\n",
        "    image = vision.Image(content=image_content)\n",
        "\n",
        "    # Perform text detection\n",
        "    response = client.text_detection(image=image)\n",
        "    texts = response.text_annotations\n",
        "\n",
        "    if texts:\n",
        "        img_text = str(texts[0].description)\n",
        "    else:\n",
        "        img_text = None\n",
        "\n",
        "    return img_text"
      ],
      "metadata": {
        "id": "QpBxpl-8Ft2K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "def extract_alpha_korean(text):\n",
        "    pattern = re.compile('[a-zA-Z가-힣]+')\n",
        "    matches = pattern.findall(text)\n",
        "    combined_result = ' '.join(matches)  # 추출된 문자열들을 공백으로 구분하여 결합\n",
        "    return combined_result\n",
        "\n",
        "sentence = \"Hello, 안녕하세요! This is a test 문장입니다.\"\n",
        "result = extract_alpha_korean(sentence)\n",
        "print(result)"
      ],
      "metadata": {
        "id": "G8niHqu8FwF8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(results)):\n",
        "    image_urls = results[i]['images'].split('\\n')\n",
        "    post_data_id = results[i]['id']\n",
        "    search_s = 'store'\n",
        "    st_urls = [url for url in image_urls if search_s in url] ## 스티커 url 리스트\n",
        "    im_urls = [url for url in image_urls if search_s not in url] ## 이미지 url 리스트\n",
        "    if st_urls: ## 스티커 url이 존재할 경우\n",
        "        st_url = st_urls[-1] ## 마지막 스티커 url만 사용\n",
        "        try:\n",
        "            st_txt = image_text(st_url)\n",
        "            st_txt = extract_alpha_korean(st_txt).replace('\\n',' ')\n",
        "            if st_txt == \"\":\n",
        "                st_txt = 'NULL'\n",
        "        except Exception as e:\n",
        "            if 'expected string or bytes-like object' not in str(e):\n",
        "                print(f\"Error processing sticker URL for id {post_data_id}: {e}\")\n",
        "            st_txt = 'None'\n",
        "    else:\n",
        "        st_txt = 'NULL'\n",
        "\n",
        "    if im_urls: ## 이미지 url이 존재할 경우\n",
        "        im_url = im_urls[-1] ## 마지막 이미지 url만 사용\n",
        "        try:\n",
        "            im_txt = image_text(im_url)\n",
        "            im_txt = extract_alpha_korean(im_txt).replace('\\n',' ')\n",
        "            if im_txt == \"\":\n",
        "                im_txt = 'NULL'\n",
        "        except Exception as e:\n",
        "            if 'expected string or bytes-like object' not in str(e):\n",
        "                print(f\"Error processing image URL for id {post_data_id}: {e}\")\n",
        "            im_txt = 'None'\n",
        "    else:\n",
        "        im_txt = 'NULL'\n",
        "\n",
        "    ocr_txt = f'{st_txt}, {im_txt}'\n",
        "    #print(ocr_txt)\n",
        "    query = f\"update post_data set ocr_text = %s where id = %s\"\n",
        "    data = (ocr_txt, post_data_id)\n",
        "    cursor.execute(query, data)\n",
        "    blogdb.commit()"
      ],
      "metadata": {
        "id": "s61aCX72FzBC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}